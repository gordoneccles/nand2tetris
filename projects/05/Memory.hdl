// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
        //// Is keyboard or screen
        And(a=address[14], b=true, out=isKeyboardOrScreen);

        //// Is keyboard
        And(a=address[14], b=address[13], out=isKeyboardOnes);
        Or8Way(
            in[7]=address[12], in[6]=address[11], in[5]=address[10], in[4]=address[9],
            in[3]=address[8], in[2]=address[7], in[1]=address[6], in[0]=address[5],
            out=keyboardHalf1HasOnes
        );
        Or8Way(
            in[7]=address[4], in[6]=address[3], in[5]=address[2], in[4]=address[1],
            in[3]=address[0], in[0..2]=false,
            out=keyboardHalf2HasOnes
        );
        Or(a=keyboardHalf1HasOnes, b=keyboardHalf2HasOnes, out=keyboardHasOnes);
        Not(in=keyboardHasOnes, out=notKeyboardHasOnes);
        And(a=isKeyboardOnes, b=notKeyboardHasOnes, out=isKeyboard);

        //// Is screen
        Not(in=isKeyboard, out=notIsKeyboard);
        And(a=isKeyboardOrScreen, b=notIsKeyboard, out=isScreen);

        //// Is memory
        Not(in=address[14], out=isMemory);

        //// Feed and address various memory chips
        And(a=load, b=isMemory, out=isMemoryLoad);
        And(a=load, b=isScreen, out=isScreenLoad);
        RAM16K(in=in, load=isMemoryLoad, address=address[0..13], out=memOut);
        Screen(in=in, load=isScreenLoad, address=address[0..12], out=screenOut);
        Keyboard(out=keyboardOut);

        //// Select output
        Mux16(a=memOut, b=screenOut, sel=isScreen, out=muxMemScreen);
        Mux16(a=muxMemScreen, b=keyboardOut, sel=isKeyboard, out=out);
}
