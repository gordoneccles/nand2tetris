@256
D=A
@SP
M=D
@RETURN_FROM_Sys.init_0
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
@LCL
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@ARG
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@THIS
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@THAT
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN_FROM_Sys.init_0)
(Main.fibonacci) // function Main.fibonacci 0
@ARG // push argument 0
A=M
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@2 // push constant 2
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
@SP // lt
D=M-1
D=D-1
M=D
A=D+1
D=M
A=A-1
D=M-D
@JMP_LT_0
D;JLT
D=0
@END_JMP_LT_0
0;JMP
(JMP_LT_0)
D=-1
(END_JMP_LT_0)
@SP
A=M
M=D
D=A+1
@SP
M=D
@SP // if-goto IF_TRUE
D=M-1
M=D
A=D
D=M
@Main.fibonacci$IF_TRUE
D;JLT
D;JGT
@Main.fibonacci$IF_FALSE // goto IF_FALSE
0;JMP
(Main.fibonacci$IF_TRUE) // label IF_TRUE
@ARG // push argument 0
A=M
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@LCL // return
D=M
@R13
M=D
A=D
A=A-1
A=A-1
A=A-1
A=A-1
A=A-1
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@R13
A=M-1
A=A-1
D=M
@THIS
M=D
@R13
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@R13
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
(Main.fibonacci$IF_FALSE) // label IF_FALSE
@ARG // push argument 0
A=M
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@2 // push constant 2
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
@SP // sub
D=M-1
D=D-1
M=D
A=D+1
D=M
A=A-1
D=M-D
@SP
A=M
M=D
D=A+1
@SP
M=D
@RETURN_FROM_Main.fibonacci_1 // call Main.fibonacci 1
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
@LCL
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@ARG
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@THIS
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@THAT
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN_FROM_Main.fibonacci_1)
@ARG // push argument 0
A=M
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@1 // push constant 1
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
@SP // sub
D=M-1
D=D-1
M=D
A=D+1
D=M
A=A-1
D=M-D
@SP
A=M
M=D
D=A+1
@SP
M=D
@RETURN_FROM_Main.fibonacci_2 // call Main.fibonacci 1
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
@LCL
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@ARG
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@THIS
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@THAT
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN_FROM_Main.fibonacci_2)
@SP // add
D=M-1
D=D-1
M=D
A=D+1
D=M
A=A-1
D=D+M
@SP
A=M
M=D
D=A+1
@SP
M=D
@LCL // return
D=M
@R13
M=D
A=D
A=A-1
A=A-1
A=A-1
A=A-1
A=A-1
D=M
@R14
M=D
@SP
A=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@R13
A=M-1
D=M
@THAT
M=D
@R13
A=M-1
A=A-1
D=M
@THIS
M=D
@R13
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
@R13
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
@R14
A=M
0;JMP
(Sys.init) // function Sys.init 0
@4 // push constant 4
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
@RETURN_FROM_Main.fibonacci_3 // call Main.fibonacci 1
D=A
@SP
A=M
M=D
D=A+1
@SP
M=D
@LCL
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@ARG
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@THIS
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
@THAT
D=M
@SP
A=M
M=D
D=A+1
@SP
M=D
D=M
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
D=D-1
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(RETURN_FROM_Main.fibonacci_3)
(Sys.init$WHILE) // label WHILE
@Sys.init$WHILE // goto WHILE
0;JMP
