// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static int wordSize, screenStartAddr, screenWidthWords, screenHeightWords, screenEndAddr;
    static bool color;

    /** Initializes the Screen. */
    function void init() {
      let wordSize = 16;
      let screenStartAddr = 16384;
      let screenWidthWords = 32;
      let screenHeightWords = 256;
      let screenEndAddr = screenStartAddr + (screenWidthWords * screenHeightWords) - 1;
      let color = true;
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int addr;
      let addr = screenStartAddr;

      while ((addr - 1) < screenEndAddr) {
        do Memory.poke(addr, 0);
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color = b;
      return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      var int wordAddr, currValue, idxInWord, mask, i;

      let wordAddr = screenStartAddr + (y * screenWidthWords) + (x / wordSize);
      let currValue = Memory.peek(wordAddr);
      let idxInWord = x - ((x / wordSize) * wordSize);

      let i = 0;
      let mask = 1;
      while (i < idxInWord) {
        let mask = mask + mask;
        let i = i + 1;
      }

      if (color = false) {
        let mask = ~mask;
        let currValue = currValue & mask;
      } else {
        let currValue = currValue | mask;
      }

      do Memory.poke(wordAddr, currValue);
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int dX, dY, a, b, diff, dirX, dirY;

      let dX = x2 - x1;
      let dY = y2 - y1;
      let dirX = 1;
      let dirY = 1;

      if (dX < 0) {
        let dX = -dX;
        let dirX = -1;
      }
      if (dY < 0) {
        let dY = -dY;
        let dirY = -1;
      }

      let a = 0;
      let b = 0;

      // Special cases
      if ((dX = 0) & (dY = 0)) {
        do Screen.drawPixel(x1, y1);
        return;
      }
      if (dY = 0) {
        while ((a - 1) < dX) {
          do Screen.drawPixel(x1 + (a * dirX), y1);
          let a = a + 1;
        }
        return;
      }
      if (dX = 0) {
        while ((b - 1) < dY) {
          do Screen.drawPixel(x1, (b * dirY) + y1);
          let b = b + 1;
        }
        return;
      }

      let diff = 0;
      while (((a - 1) < dX) & ((b - 1) < dY)) {
        do Screen.drawPixel(x1 + (a * dirX), y1 + (b * dirY));

        if (diff < 0) {
          let a = a + 1;
          let diff = diff + dY;
        } else {
          let b = b + 1;
          let diff = diff - dX;
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      var int y, yEnd;

      let y = Math.min(y1, y2);
      let yEnd = Math.max(y1, y2);

      while ((y - 1) < yEnd) {
        do Screen.drawLine(x1, y, x2, y);
        let y = y + 1;
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int dX, dY, rSquared;

      let rSquared = r * r;
      let dY = -r + 1;

      while (dY < r) {
        let dX = Math.sqrt(Math.abs(rSquared  - (dY * dY)));
        do Screen.drawLine(x + dX, y + dY, x - dX, y + dY);
        // do Screen.drawPixel(x + dX, y + dY);
        // do Screen.drawPixel(x - dX, y + dY);
        let dY = dY + 1;
      }
      return;
    }
}
