// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int strLen, maxLen, asciiDigitsStart;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      var int dummy;
      let asciiDigitsStart = 48;
      let maxLen = maxLength;
      if (maxLength > 0) {
        let chars = Array.new(maxLength);
      } else {
        let chars = false;
      }
      let strLen = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if (chars) {
        do chars.dispose();
      }
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return strLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      if ((j > -1) & (j < strLen) & chars) {
        return chars[j];
      }
      return false;
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      if ((j > -1) & (j < strLen) & chars) {
        let chars[j] = c;
      }
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      var int dummy;
      if (strLen < maxLen) {
        let chars[strLen] = c;
        let strLen = strLen + 1;
      }
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      if (strLen > 0) {
        let strLen = strLen - 1;
      }
      return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      var int i, acc, digitChar, pow;
      var bool isNeg;

      let i = strLen - 1;
      let acc = 0;
      let pow = 1;
      let isNeg = false;
      while (i > -1) {
        let digitChar = chars[i];
        if (digitChar = 45) {  // '-' character
          let isNeg = true;
        } else {
          let acc = acc + ((digitChar - asciiDigitsStart) * pow);
          let pow = pow * 10;
        }
        let i = i - 1;
      }

      if (isNeg) {
        let acc = -acc;
      }

      return acc;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      var int rightMostDigit, i;
      var char temp;
      var bool isNeg;

      if (val = 0) {
        let chars[0] = asciiDigitsStart;
        let strLen = 1;
        return;
      }

      let isNeg = false;
      if (val < 0) {
        let val = -val;
        let isNeg = true;
      }

      let strLen = 0;
      let i = 0;
      while (val > 0) {
        if ((i + 1) > maxLen) {
          return;
        }
        let rightMostDigit = val - ((val / 10) * 10);
        let chars[i] = asciiDigitsStart + rightMostDigit;
        let strLen = strLen + 1;
        let i = i + 1;
        let val = val / 10;
      }

      if (isNeg) {
        let chars[i]  = 45;  // '-' character
        let strLen = strLen + 1;
        let i = i + 1;
      }

      let i = 0;
      while (i < (strLen / 2)) {
        let temp = chars[i];
        let chars[i] = chars[strLen - i - 1];
        let chars[strLen - i - 1] = temp;
        let i = i + 1;
      }

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
