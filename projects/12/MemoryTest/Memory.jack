// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram;
    static int head, tail;

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let head = 2048;
      let tail = 2048;
      let ram[head] = 0;
      let ram[head + 1] = (16383 - 2048) - 2;
      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
      var int segSize, blockAddr, currentSegAddr;
      let currentSegAddr = head;

      while (true) {
        let segSize = ram[currentSegAddr + 1];

        if ((segSize - 1) > (size + 2)) {
          let blockAddr = currentSegAddr + segSize + 2 - size - 2;
          let ram[currentSegAddr + 1] = segSize - size - 2;
          let ram[blockAddr] = 0;
          let ram[blockAddr + 1] = size;
          return blockAddr - 2;
        } else {
          let currentSegAddr = ram[currentSegAddr];
        }
      }
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      let ram[tail] = o - 2;
      let tail = o - 2;
      return;
    }
}
